{\rtf1\ansi\ansicpg949\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset129 NanumGothic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red74\green80\blue93;\red155\green162\blue177;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c36078\c38824\c43922;\cssrgb\c67059\c69804\c74902;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww16900\viewh13220\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 # AWS \'c8\'af\'b0\'e6\'c0\'c7 \'ba\'b8\'be\'c8\'b1\'d7\'b7\'ec(Security Group) \'c3\'d6\'c0\'fb\'c8\'ad \'b5\'b5\'b1\'b8\strokec4 \
\strokec3 # \'ba\'bb \'bd\'ba\'c5\'a9\'b8\'b3\'c6\'ae\'b4\'c2 AWS \'c0\'ce\'c7\'c1\'b6\'f3\'bf\'a1\'bc\'ad \'b9\'cc\'bb\'e7\'bf\'eb \'c1\'df\'c0\'ce \'ba\'b8\'be\'c8\'b1\'d7\'b7\'ec\'c0\'bb \'c8\'bf\'c0\'b2\'c0\'fb\'c0\'b8\'b7\'ce \'bd\'c4\'ba\'b0\'c7\'cf\'bf\'a9 \'b8\'ae\'bc\'d2\'bd\'ba \'b0\'fc\'b8\'ae \'c3\'d6\'c0\'fb\'c8\'ad \'b9\'d7 \'ba\'b8\'be\'c8 \'b0\'ad\'c8\'ad\'bf\'a1 \'b1\'e2\'bf\'a9\'c7\'d5\'b4\'cf\'b4\'d9.\strokec4 \
\strokec3 # \'c0\'db\'bc\'ba\'c0\'da: https://www.linkedin.com/in/072072072yc/
\fs22 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
import boto3\
ec2 = boto3.client('ec2')\
elb = boto3.client('elbv2')\
elb_classic = boto3.client('elb')\
rds = boto3.client('rds')\
lambda_client = boto3.client('lambda')\
autoscaling = boto3.client('autoscaling')\
def get_attached_security_group_ids():\
    attached_sg_ids = set()\
    for interface in ec2.describe_network_interfaces()['NetworkInterfaces']:\
        for group in interface['Groups']:\
            attached_sg_ids.add(group['GroupId'])\
    for lb in elb.describe_load_balancers()['LoadBalancers']:\
        for sg in lb.get('SecurityGroups', []):\
            attached_sg_ids.add(sg)\
    for lb in elb_classic.describe_load_balancers()['LoadBalancerDescriptions']:\
        for sg in lb.get('SecurityGroups', []):\
            attached_sg_ids.add(sg)\
    \
    for instance in rds.describe_db_instances()['DBInstances']:\
        for sg in instance.get('VpcSecurityGroups', []):\
            attached_sg_ids.add(sg['VpcSecurityGroupId'])\
    for function in lambda_client.list_functions()['Functions']:\
        for sg in function.get('VpcConfig', \{\}).get('SecurityGroupIds', []):\
            attached_sg_ids.add(sg)\
    paginator = autoscaling.get_paginator('describe_auto_scaling_groups')\
    pages = paginator.paginate()\
    for page in pages:\
        for asg in page['AutoScalingGroups']:\
            if 'LaunchConfigurationName' in asg:\
                response = autoscaling.describe_launch_configurations(LaunchConfigurationNames=[asg['LaunchConfigurationName']])\
                for sg in response['LaunchConfigurations'][0].get('SecurityGroups', []):\
                    attached_sg_ids.add(sg)\
            elif 'MixedInstancesPolicy' in asg and 'LaunchTemplate' in asg['MixedInstancesPolicy']['LaunchTemplate']:\
                launch_template = asg['MixedInstancesPolicy']['LaunchTemplate']['LaunchTemplateSpecification']\
                lt_response = ec2.describe_launch_template_versions(LaunchTemplateId=launch_template['LaunchTemplateId'], Versions=[launch_template['Version']])\
                for sg in lt_response['LaunchTemplateVersions'][0]['LaunchTemplateData'].get('SecurityGroupIds', []):\
                    attached_sg_ids.add(sg)\
            elif 'LaunchTemplate' in asg:\
                launch_template = asg['LaunchTemplate']\
                lt_response = ec2.describe_launch_template_versions(LaunchTemplateId=launch_template['LaunchTemplateId'], Versions=[launch_template['Version']])\
                for sg in lt_response['LaunchTemplateVersions'][0]['LaunchTemplateData'].get('SecurityGroupIds', []):\
                    attached_sg_ids.add(sg)\
    return attached_sg_ids\
all_sg_ids = set(sg['GroupId'] for sg in ec2.describe_security_groups()['SecurityGroups'])\
attached_sg_ids = get_attached_security_group_ids()\
unattached_sg_ids = all_sg_ids - attached_sg_ids\
for sg_id in unattached_sg_ids:\
    try:\
        response = ec2.describe_security_groups(GroupIds=[sg_id])\
        group_name = response['SecurityGroups'][0]['GroupName']\
        print(f"GroupId: \{sg_id\}, GroupName: \{group_name\}")\
    except Exception as e:\
        print(f"Error getting information for \{sg_id\}: \{e\}")}